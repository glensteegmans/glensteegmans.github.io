{"ast":null,"code":"var _jsxFileName = \"/home/glensteegmans/Documents/Glen_Steegmans/glensteegmans.github.io/portfolio-website/src/components/reflection/ProgressChart.js\",\n  _s = $RefreshSig$();\n// src/components/reflection/ProgressChart.js\nimport React, { useEffect, useRef } from 'react';\nimport '../../styles/components/ProgressChart.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProgressChart = ({\n  xFactorData\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  useEffect(() => {\n    if (!canvasRef.current || !xFactorData) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // Set dimensions based on the container size\n    canvas.width = canvas.offsetWidth;\n    canvas.height = canvas.offsetHeight;\n    const centerX = canvas.width / 2;\n    const centerY = canvas.height / 2;\n    const radius = Math.min(centerX, centerY) - 40;\n\n    // Draw radar background\n    drawRadarBackground(ctx, centerX, centerY, radius);\n\n    // Draw data for start levels - changed to darker gray\n    drawDataShape(ctx, centerX, centerY, radius, xFactorData, 'startLevel', 'rgba(100, 100, 100, 0.9)', 'rgba(100, 100, 100, 0.3)');\n\n    // Draw data for end levels - changed to vibrant blue\n    drawDataShape(ctx, centerX, centerY, radius, xFactorData, 'endLevel', 'rgba(25, 118, 210, 1)', 'rgba(66, 133, 244, 0.5)');\n\n    // Draw labels\n    drawLabels(ctx, centerX, centerY, radius, xFactorData);\n\n    // Draw legend\n    drawLegend(ctx, canvas.width, canvas.height);\n  }, [xFactorData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"progress-chart\",\n    children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n\n// Helper functions for drawing the chart\n_s(ProgressChart, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = ProgressChart;\nfunction drawRadarBackground(ctx, centerX, centerY, radius) {\n  const levelCount = 5; // 5 levels from 1 to 5\n\n  // Draw level circles - improved visibility\n  for (let i = 1; i <= levelCount; i++) {\n    const currentRadius = radius / levelCount * i;\n    ctx.beginPath();\n    ctx.arc(centerX, centerY, currentRadius, 0, 2 * Math.PI);\n    ctx.strokeStyle = 'rgba(200, 200, 200, 0.3)'; // Made grid lines more visible\n    ctx.stroke();\n\n    // Add level number with better contrast\n    if (i < levelCount) {\n      ctx.fillStyle = 'rgba(80, 80, 80, 0.8)'; // Darker text for better visibility\n      ctx.font = '12px Arial';\n      ctx.fillText(i.toString(), centerX + 5, centerY - currentRadius + 15);\n    }\n  }\n\n  // Draw axis lines (5 axes for 5 factors) - improved visibility\n  const angleStep = 2 * Math.PI / 5;\n  for (let i = 0; i < 5; i++) {\n    const angle = i * angleStep - Math.PI / 2; // Start from top (subtract PI/2)\n\n    const endX = centerX + radius * Math.cos(angle);\n    const endY = centerY + radius * Math.sin(angle);\n    ctx.beginPath();\n    ctx.moveTo(centerX, centerY);\n    ctx.lineTo(endX, endY);\n    ctx.strokeStyle = 'rgba(150, 150, 150, 0.5)'; // Made axis lines more visible\n    ctx.stroke();\n  }\n}\nfunction drawDataShape(ctx, centerX, centerY, radius, data, levelKey, borderColor, fillColor) {\n  const factorKeys = Object.keys(data);\n  const angleStep = 2 * Math.PI / factorKeys.length;\n  ctx.beginPath();\n  factorKeys.forEach((factor, index) => {\n    const angle = index * angleStep - Math.PI / 2; // Start from top\n    const value = data[factor][levelKey];\n    const scaledRadius = radius / 5 * value; // Scale to max 5\n\n    const x = centerX + scaledRadius * Math.cos(angle);\n    const y = centerY + scaledRadius * Math.sin(angle);\n    if (index === 0) {\n      ctx.moveTo(x, y);\n    } else {\n      ctx.lineTo(x, y);\n    }\n  });\n\n  // Close the path\n  ctx.closePath();\n\n  // Fill with semi-transparent color\n  ctx.fillStyle = fillColor;\n  ctx.fill();\n\n  // Stroke the outline\n  ctx.strokeStyle = borderColor;\n  ctx.lineWidth = 2;\n  ctx.stroke();\n\n  // Add dots at each data point\n  factorKeys.forEach((factor, index) => {\n    const angle = index * angleStep - Math.PI / 2;\n    const value = data[factor][levelKey];\n    const scaledRadius = radius / 5 * value;\n    const x = centerX + scaledRadius * Math.cos(angle);\n    const y = centerY + scaledRadius * Math.sin(angle);\n    ctx.beginPath();\n    ctx.arc(x, y, 4, 0, 2 * Math.PI);\n    ctx.fillStyle = borderColor;\n    ctx.fill();\n  });\n}\nfunction drawLabels(ctx, centerX, centerY, radius, data) {\n  const factorKeys = Object.keys(data);\n  const angleStep = 2 * Math.PI / factorKeys.length;\n  factorKeys.forEach((factor, index) => {\n    const angle = index * angleStep - Math.PI / 2;\n    const labelRadius = radius + 25;\n    const x = centerX + labelRadius * Math.cos(angle);\n    const y = centerY + labelRadius * Math.sin(angle);\n    ctx.fillStyle = '#333333'; // Darker text for better visibility on white background\n    ctx.font = 'bold 12px Arial';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n\n    // Adjust text position based on angle\n    let adjustedX = x;\n    let adjustedY = y;\n    if (angle === -Math.PI / 2) {\n      // Top\n      adjustedY -= 10;\n    } else if (angle === Math.PI / 2) {\n      // Bottom\n      adjustedY += 10;\n    } else if (angle === 0) {\n      // Right\n      adjustedX += 10;\n    } else if (angle === Math.PI) {\n      // Left\n      adjustedX -= 10;\n    }\n    ctx.fillText(data[factor].title, adjustedX, adjustedY);\n  });\n}\nfunction drawLegend(ctx, width, height) {\n  const legendX = width - 150;\n  const legendY = height - 50;\n\n  // Start legend - updated color to match the chart\n  ctx.fillStyle = 'rgba(100, 100, 100, 0.9)';\n  ctx.fillRect(legendX, legendY, 15, 15);\n  ctx.fillStyle = '#333333'; // Darker text for better visibility\n  ctx.font = '12px Arial';\n  ctx.textAlign = 'left';\n  ctx.fillText('Start van traject', legendX + 25, legendY + 10);\n\n  // End legend - updated color to match the chart\n  ctx.fillStyle = 'rgba(25, 118, 210, 1)';\n  ctx.fillRect(legendX, legendY + 25, 15, 15);\n  ctx.fillStyle = '#333333'; // Darker text for better visibility\n  ctx.fillText('Huidige niveau', legendX + 25, legendY + 35);\n}\nexport default ProgressChart;\nvar _c;\n$RefreshReg$(_c, \"ProgressChart\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","ProgressChart","xFactorData","_s","canvasRef","current","canvas","ctx","getContext","clearRect","width","height","offsetWidth","offsetHeight","centerX","centerY","radius","Math","min","drawRadarBackground","drawDataShape","drawLabels","drawLegend","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","levelCount","i","currentRadius","beginPath","arc","PI","strokeStyle","stroke","fillStyle","font","fillText","toString","angleStep","angle","endX","cos","endY","sin","moveTo","lineTo","data","levelKey","borderColor","fillColor","factorKeys","Object","keys","length","forEach","factor","index","value","scaledRadius","x","y","closePath","fill","lineWidth","labelRadius","textAlign","textBaseline","adjustedX","adjustedY","title","legendX","legendY","fillRect","$RefreshReg$"],"sources":["/home/glensteegmans/Documents/Glen_Steegmans/glensteegmans.github.io/portfolio-website/src/components/reflection/ProgressChart.js"],"sourcesContent":["// src/components/reflection/ProgressChart.js\nimport React, { useEffect, useRef } from 'react';\nimport '../../styles/components/ProgressChart.css';\n\nconst ProgressChart = ({ xFactorData }) => {\n  const canvasRef = useRef(null);\n  \n  useEffect(() => {\n    if (!canvasRef.current || !xFactorData) return;\n    \n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    \n    // Clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    \n    // Set dimensions based on the container size\n    canvas.width = canvas.offsetWidth;\n    canvas.height = canvas.offsetHeight;\n    \n    const centerX = canvas.width / 2;\n    const centerY = canvas.height / 2;\n    const radius = Math.min(centerX, centerY) - 40;\n    \n    // Draw radar background\n    drawRadarBackground(ctx, centerX, centerY, radius);\n    \n    // Draw data for start levels - changed to darker gray\n    drawDataShape(ctx, centerX, centerY, radius, xFactorData, 'startLevel', 'rgba(100, 100, 100, 0.9)', 'rgba(100, 100, 100, 0.3)');\n    \n    // Draw data for end levels - changed to vibrant blue\n    drawDataShape(ctx, centerX, centerY, radius, xFactorData, 'endLevel', 'rgba(25, 118, 210, 1)', 'rgba(66, 133, 244, 0.5)');\n    \n    // Draw labels\n    drawLabels(ctx, centerX, centerY, radius, xFactorData);\n    \n    // Draw legend\n    drawLegend(ctx, canvas.width, canvas.height);\n    \n  }, [xFactorData]);\n  \n  return (\n    <div className=\"progress-chart\">\n      <canvas ref={canvasRef}></canvas>\n    </div>\n  );\n};\n\n// Helper functions for drawing the chart\nfunction drawRadarBackground(ctx, centerX, centerY, radius) {\n  const levelCount = 5; // 5 levels from 1 to 5\n  \n  // Draw level circles - improved visibility\n  for (let i = 1; i <= levelCount; i++) {\n    const currentRadius = (radius / levelCount) * i;\n    \n    ctx.beginPath();\n    ctx.arc(centerX, centerY, currentRadius, 0, 2 * Math.PI);\n    ctx.strokeStyle = 'rgba(200, 200, 200, 0.3)'; // Made grid lines more visible\n    ctx.stroke();\n    \n    // Add level number with better contrast\n    if (i < levelCount) {\n      ctx.fillStyle = 'rgba(80, 80, 80, 0.8)'; // Darker text for better visibility\n      ctx.font = '12px Arial';\n      ctx.fillText(i.toString(), centerX + 5, centerY - currentRadius + 15);\n    }\n  }\n  \n  // Draw axis lines (5 axes for 5 factors) - improved visibility\n  const angleStep = (2 * Math.PI) / 5;\n  \n  for (let i = 0; i < 5; i++) {\n    const angle = i * angleStep - Math.PI / 2; // Start from top (subtract PI/2)\n    \n    const endX = centerX + radius * Math.cos(angle);\n    const endY = centerY + radius * Math.sin(angle);\n    \n    ctx.beginPath();\n    ctx.moveTo(centerX, centerY);\n    ctx.lineTo(endX, endY);\n    ctx.strokeStyle = 'rgba(150, 150, 150, 0.5)'; // Made axis lines more visible\n    ctx.stroke();\n  }\n}\n\nfunction drawDataShape(ctx, centerX, centerY, radius, data, levelKey, borderColor, fillColor) {\n  const factorKeys = Object.keys(data);\n  const angleStep = (2 * Math.PI) / factorKeys.length;\n  \n  ctx.beginPath();\n  \n  factorKeys.forEach((factor, index) => {\n    const angle = index * angleStep - Math.PI / 2; // Start from top\n    const value = data[factor][levelKey];\n    const scaledRadius = (radius / 5) * value; // Scale to max 5\n    \n    const x = centerX + scaledRadius * Math.cos(angle);\n    const y = centerY + scaledRadius * Math.sin(angle);\n    \n    if (index === 0) {\n      ctx.moveTo(x, y);\n    } else {\n      ctx.lineTo(x, y);\n    }\n  });\n  \n  // Close the path\n  ctx.closePath();\n  \n  // Fill with semi-transparent color\n  ctx.fillStyle = fillColor;\n  ctx.fill();\n  \n  // Stroke the outline\n  ctx.strokeStyle = borderColor;\n  ctx.lineWidth = 2;\n  ctx.stroke();\n  \n  // Add dots at each data point\n  factorKeys.forEach((factor, index) => {\n    const angle = index * angleStep - Math.PI / 2;\n    const value = data[factor][levelKey];\n    const scaledRadius = (radius / 5) * value;\n    \n    const x = centerX + scaledRadius * Math.cos(angle);\n    const y = centerY + scaledRadius * Math.sin(angle);\n    \n    ctx.beginPath();\n    ctx.arc(x, y, 4, 0, 2 * Math.PI);\n    ctx.fillStyle = borderColor;\n    ctx.fill();\n  });\n}\n\nfunction drawLabels(ctx, centerX, centerY, radius, data) {\n  const factorKeys = Object.keys(data);\n  const angleStep = (2 * Math.PI) / factorKeys.length;\n  \n  factorKeys.forEach((factor, index) => {\n    const angle = index * angleStep - Math.PI / 2;\n    const labelRadius = radius + 25;\n    \n    const x = centerX + labelRadius * Math.cos(angle);\n    const y = centerY + labelRadius * Math.sin(angle);\n    \n    ctx.fillStyle = '#333333'; // Darker text for better visibility on white background\n    ctx.font = 'bold 12px Arial';\n    ctx.textAlign = 'center';\n    ctx.textBaseline = 'middle';\n    \n    // Adjust text position based on angle\n    let adjustedX = x;\n    let adjustedY = y;\n    \n    if (angle === -Math.PI / 2) { // Top\n      adjustedY -= 10;\n    } else if (angle === Math.PI / 2) { // Bottom\n      adjustedY += 10;\n    } else if (angle === 0) { // Right\n      adjustedX += 10;\n    } else if (angle === Math.PI) { // Left\n      adjustedX -= 10;\n    }\n    \n    ctx.fillText(data[factor].title, adjustedX, adjustedY);\n  });\n}\n\nfunction drawLegend(ctx, width, height) {\n  const legendX = width - 150;\n  const legendY = height - 50;\n  \n  // Start legend - updated color to match the chart\n  ctx.fillStyle = 'rgba(100, 100, 100, 0.9)';\n  ctx.fillRect(legendX, legendY, 15, 15);\n  ctx.fillStyle = '#333333'; // Darker text for better visibility\n  ctx.font = '12px Arial';\n  ctx.textAlign = 'left';\n  ctx.fillText('Start van traject', legendX + 25, legendY + 10);\n  \n  // End legend - updated color to match the chart\n  ctx.fillStyle = 'rgba(25, 118, 210, 1)';\n  ctx.fillRect(legendX, legendY + 25, 15, 15);\n  ctx.fillStyle = '#333333'; // Darker text for better visibility\n  ctx.fillText('Huidige niveau', legendX + 25, legendY + 35);\n}\n\nexport default ProgressChart;"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,2CAA2C;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EACzC,MAAMC,SAAS,GAAGN,MAAM,CAAC,IAAI,CAAC;EAE9BD,SAAS,CAAC,MAAM;IACd,IAAI,CAACO,SAAS,CAACC,OAAO,IAAI,CAACH,WAAW,EAAE;IAExC,MAAMI,MAAM,GAAGF,SAAS,CAACC,OAAO;IAChC,MAAME,GAAG,GAAGD,MAAM,CAACE,UAAU,CAAC,IAAI,CAAC;;IAEnC;IACAD,GAAG,CAACE,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEH,MAAM,CAACI,KAAK,EAAEJ,MAAM,CAACK,MAAM,CAAC;;IAEhD;IACAL,MAAM,CAACI,KAAK,GAAGJ,MAAM,CAACM,WAAW;IACjCN,MAAM,CAACK,MAAM,GAAGL,MAAM,CAACO,YAAY;IAEnC,MAAMC,OAAO,GAAGR,MAAM,CAACI,KAAK,GAAG,CAAC;IAChC,MAAMK,OAAO,GAAGT,MAAM,CAACK,MAAM,GAAG,CAAC;IACjC,MAAMK,MAAM,GAAGC,IAAI,CAACC,GAAG,CAACJ,OAAO,EAAEC,OAAO,CAAC,GAAG,EAAE;;IAE9C;IACAI,mBAAmB,CAACZ,GAAG,EAAEO,OAAO,EAAEC,OAAO,EAAEC,MAAM,CAAC;;IAElD;IACAI,aAAa,CAACb,GAAG,EAAEO,OAAO,EAAEC,OAAO,EAAEC,MAAM,EAAEd,WAAW,EAAE,YAAY,EAAE,0BAA0B,EAAE,0BAA0B,CAAC;;IAE/H;IACAkB,aAAa,CAACb,GAAG,EAAEO,OAAO,EAAEC,OAAO,EAAEC,MAAM,EAAEd,WAAW,EAAE,UAAU,EAAE,uBAAuB,EAAE,yBAAyB,CAAC;;IAEzH;IACAmB,UAAU,CAACd,GAAG,EAAEO,OAAO,EAAEC,OAAO,EAAEC,MAAM,EAAEd,WAAW,CAAC;;IAEtD;IACAoB,UAAU,CAACf,GAAG,EAAED,MAAM,CAACI,KAAK,EAAEJ,MAAM,CAACK,MAAM,CAAC;EAE9C,CAAC,EAAE,CAACT,WAAW,CAAC,CAAC;EAEjB,oBACEF,OAAA;IAAKuB,SAAS,EAAC,gBAAgB;IAAAC,QAAA,eAC7BxB,OAAA;MAAQyB,GAAG,EAAErB;IAAU;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAS;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9B,CAAC;AAEV,CAAC;;AAED;AAAA1B,EAAA,CA5CMF,aAAa;AAAA6B,EAAA,GAAb7B,aAAa;AA6CnB,SAASkB,mBAAmBA,CAACZ,GAAG,EAAEO,OAAO,EAAEC,OAAO,EAAEC,MAAM,EAAE;EAC1D,MAAMe,UAAU,GAAG,CAAC,CAAC,CAAC;;EAEtB;EACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAID,UAAU,EAAEC,CAAC,EAAE,EAAE;IACpC,MAAMC,aAAa,GAAIjB,MAAM,GAAGe,UAAU,GAAIC,CAAC;IAE/CzB,GAAG,CAAC2B,SAAS,CAAC,CAAC;IACf3B,GAAG,CAAC4B,GAAG,CAACrB,OAAO,EAAEC,OAAO,EAAEkB,aAAa,EAAE,CAAC,EAAE,CAAC,GAAGhB,IAAI,CAACmB,EAAE,CAAC;IACxD7B,GAAG,CAAC8B,WAAW,GAAG,0BAA0B,CAAC,CAAC;IAC9C9B,GAAG,CAAC+B,MAAM,CAAC,CAAC;;IAEZ;IACA,IAAIN,CAAC,GAAGD,UAAU,EAAE;MAClBxB,GAAG,CAACgC,SAAS,GAAG,uBAAuB,CAAC,CAAC;MACzChC,GAAG,CAACiC,IAAI,GAAG,YAAY;MACvBjC,GAAG,CAACkC,QAAQ,CAACT,CAAC,CAACU,QAAQ,CAAC,CAAC,EAAE5B,OAAO,GAAG,CAAC,EAAEC,OAAO,GAAGkB,aAAa,GAAG,EAAE,CAAC;IACvE;EACF;;EAEA;EACA,MAAMU,SAAS,GAAI,CAAC,GAAG1B,IAAI,CAACmB,EAAE,GAAI,CAAC;EAEnC,KAAK,IAAIJ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC1B,MAAMY,KAAK,GAAGZ,CAAC,GAAGW,SAAS,GAAG1B,IAAI,CAACmB,EAAE,GAAG,CAAC,CAAC,CAAC;;IAE3C,MAAMS,IAAI,GAAG/B,OAAO,GAAGE,MAAM,GAAGC,IAAI,CAAC6B,GAAG,CAACF,KAAK,CAAC;IAC/C,MAAMG,IAAI,GAAGhC,OAAO,GAAGC,MAAM,GAAGC,IAAI,CAAC+B,GAAG,CAACJ,KAAK,CAAC;IAE/CrC,GAAG,CAAC2B,SAAS,CAAC,CAAC;IACf3B,GAAG,CAAC0C,MAAM,CAACnC,OAAO,EAAEC,OAAO,CAAC;IAC5BR,GAAG,CAAC2C,MAAM,CAACL,IAAI,EAAEE,IAAI,CAAC;IACtBxC,GAAG,CAAC8B,WAAW,GAAG,0BAA0B,CAAC,CAAC;IAC9C9B,GAAG,CAAC+B,MAAM,CAAC,CAAC;EACd;AACF;AAEA,SAASlB,aAAaA,CAACb,GAAG,EAAEO,OAAO,EAAEC,OAAO,EAAEC,MAAM,EAAEmC,IAAI,EAAEC,QAAQ,EAAEC,WAAW,EAAEC,SAAS,EAAE;EAC5F,MAAMC,UAAU,GAAGC,MAAM,CAACC,IAAI,CAACN,IAAI,CAAC;EACpC,MAAMR,SAAS,GAAI,CAAC,GAAG1B,IAAI,CAACmB,EAAE,GAAImB,UAAU,CAACG,MAAM;EAEnDnD,GAAG,CAAC2B,SAAS,CAAC,CAAC;EAEfqB,UAAU,CAACI,OAAO,CAAC,CAACC,MAAM,EAAEC,KAAK,KAAK;IACpC,MAAMjB,KAAK,GAAGiB,KAAK,GAAGlB,SAAS,GAAG1B,IAAI,CAACmB,EAAE,GAAG,CAAC,CAAC,CAAC;IAC/C,MAAM0B,KAAK,GAAGX,IAAI,CAACS,MAAM,CAAC,CAACR,QAAQ,CAAC;IACpC,MAAMW,YAAY,GAAI/C,MAAM,GAAG,CAAC,GAAI8C,KAAK,CAAC,CAAC;;IAE3C,MAAME,CAAC,GAAGlD,OAAO,GAAGiD,YAAY,GAAG9C,IAAI,CAAC6B,GAAG,CAACF,KAAK,CAAC;IAClD,MAAMqB,CAAC,GAAGlD,OAAO,GAAGgD,YAAY,GAAG9C,IAAI,CAAC+B,GAAG,CAACJ,KAAK,CAAC;IAElD,IAAIiB,KAAK,KAAK,CAAC,EAAE;MACftD,GAAG,CAAC0C,MAAM,CAACe,CAAC,EAAEC,CAAC,CAAC;IAClB,CAAC,MAAM;MACL1D,GAAG,CAAC2C,MAAM,CAACc,CAAC,EAAEC,CAAC,CAAC;IAClB;EACF,CAAC,CAAC;;EAEF;EACA1D,GAAG,CAAC2D,SAAS,CAAC,CAAC;;EAEf;EACA3D,GAAG,CAACgC,SAAS,GAAGe,SAAS;EACzB/C,GAAG,CAAC4D,IAAI,CAAC,CAAC;;EAEV;EACA5D,GAAG,CAAC8B,WAAW,GAAGgB,WAAW;EAC7B9C,GAAG,CAAC6D,SAAS,GAAG,CAAC;EACjB7D,GAAG,CAAC+B,MAAM,CAAC,CAAC;;EAEZ;EACAiB,UAAU,CAACI,OAAO,CAAC,CAACC,MAAM,EAAEC,KAAK,KAAK;IACpC,MAAMjB,KAAK,GAAGiB,KAAK,GAAGlB,SAAS,GAAG1B,IAAI,CAACmB,EAAE,GAAG,CAAC;IAC7C,MAAM0B,KAAK,GAAGX,IAAI,CAACS,MAAM,CAAC,CAACR,QAAQ,CAAC;IACpC,MAAMW,YAAY,GAAI/C,MAAM,GAAG,CAAC,GAAI8C,KAAK;IAEzC,MAAME,CAAC,GAAGlD,OAAO,GAAGiD,YAAY,GAAG9C,IAAI,CAAC6B,GAAG,CAACF,KAAK,CAAC;IAClD,MAAMqB,CAAC,GAAGlD,OAAO,GAAGgD,YAAY,GAAG9C,IAAI,CAAC+B,GAAG,CAACJ,KAAK,CAAC;IAElDrC,GAAG,CAAC2B,SAAS,CAAC,CAAC;IACf3B,GAAG,CAAC4B,GAAG,CAAC6B,CAAC,EAAEC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,GAAGhD,IAAI,CAACmB,EAAE,CAAC;IAChC7B,GAAG,CAACgC,SAAS,GAAGc,WAAW;IAC3B9C,GAAG,CAAC4D,IAAI,CAAC,CAAC;EACZ,CAAC,CAAC;AACJ;AAEA,SAAS9C,UAAUA,CAACd,GAAG,EAAEO,OAAO,EAAEC,OAAO,EAAEC,MAAM,EAAEmC,IAAI,EAAE;EACvD,MAAMI,UAAU,GAAGC,MAAM,CAACC,IAAI,CAACN,IAAI,CAAC;EACpC,MAAMR,SAAS,GAAI,CAAC,GAAG1B,IAAI,CAACmB,EAAE,GAAImB,UAAU,CAACG,MAAM;EAEnDH,UAAU,CAACI,OAAO,CAAC,CAACC,MAAM,EAAEC,KAAK,KAAK;IACpC,MAAMjB,KAAK,GAAGiB,KAAK,GAAGlB,SAAS,GAAG1B,IAAI,CAACmB,EAAE,GAAG,CAAC;IAC7C,MAAMiC,WAAW,GAAGrD,MAAM,GAAG,EAAE;IAE/B,MAAMgD,CAAC,GAAGlD,OAAO,GAAGuD,WAAW,GAAGpD,IAAI,CAAC6B,GAAG,CAACF,KAAK,CAAC;IACjD,MAAMqB,CAAC,GAAGlD,OAAO,GAAGsD,WAAW,GAAGpD,IAAI,CAAC+B,GAAG,CAACJ,KAAK,CAAC;IAEjDrC,GAAG,CAACgC,SAAS,GAAG,SAAS,CAAC,CAAC;IAC3BhC,GAAG,CAACiC,IAAI,GAAG,iBAAiB;IAC5BjC,GAAG,CAAC+D,SAAS,GAAG,QAAQ;IACxB/D,GAAG,CAACgE,YAAY,GAAG,QAAQ;;IAE3B;IACA,IAAIC,SAAS,GAAGR,CAAC;IACjB,IAAIS,SAAS,GAAGR,CAAC;IAEjB,IAAIrB,KAAK,KAAK,CAAC3B,IAAI,CAACmB,EAAE,GAAG,CAAC,EAAE;MAAE;MAC5BqC,SAAS,IAAI,EAAE;IACjB,CAAC,MAAM,IAAI7B,KAAK,KAAK3B,IAAI,CAACmB,EAAE,GAAG,CAAC,EAAE;MAAE;MAClCqC,SAAS,IAAI,EAAE;IACjB,CAAC,MAAM,IAAI7B,KAAK,KAAK,CAAC,EAAE;MAAE;MACxB4B,SAAS,IAAI,EAAE;IACjB,CAAC,MAAM,IAAI5B,KAAK,KAAK3B,IAAI,CAACmB,EAAE,EAAE;MAAE;MAC9BoC,SAAS,IAAI,EAAE;IACjB;IAEAjE,GAAG,CAACkC,QAAQ,CAACU,IAAI,CAACS,MAAM,CAAC,CAACc,KAAK,EAAEF,SAAS,EAAEC,SAAS,CAAC;EACxD,CAAC,CAAC;AACJ;AAEA,SAASnD,UAAUA,CAACf,GAAG,EAAEG,KAAK,EAAEC,MAAM,EAAE;EACtC,MAAMgE,OAAO,GAAGjE,KAAK,GAAG,GAAG;EAC3B,MAAMkE,OAAO,GAAGjE,MAAM,GAAG,EAAE;;EAE3B;EACAJ,GAAG,CAACgC,SAAS,GAAG,0BAA0B;EAC1ChC,GAAG,CAACsE,QAAQ,CAACF,OAAO,EAAEC,OAAO,EAAE,EAAE,EAAE,EAAE,CAAC;EACtCrE,GAAG,CAACgC,SAAS,GAAG,SAAS,CAAC,CAAC;EAC3BhC,GAAG,CAACiC,IAAI,GAAG,YAAY;EACvBjC,GAAG,CAAC+D,SAAS,GAAG,MAAM;EACtB/D,GAAG,CAACkC,QAAQ,CAAC,mBAAmB,EAAEkC,OAAO,GAAG,EAAE,EAAEC,OAAO,GAAG,EAAE,CAAC;;EAE7D;EACArE,GAAG,CAACgC,SAAS,GAAG,uBAAuB;EACvChC,GAAG,CAACsE,QAAQ,CAACF,OAAO,EAAEC,OAAO,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;EAC3CrE,GAAG,CAACgC,SAAS,GAAG,SAAS,CAAC,CAAC;EAC3BhC,GAAG,CAACkC,QAAQ,CAAC,gBAAgB,EAAEkC,OAAO,GAAG,EAAE,EAAEC,OAAO,GAAG,EAAE,CAAC;AAC5D;AAEA,eAAe3E,aAAa;AAAC,IAAA6B,EAAA;AAAAgD,YAAA,CAAAhD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}